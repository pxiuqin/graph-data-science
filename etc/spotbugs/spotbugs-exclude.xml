<?xml version="1.0" encoding="UTF-8"?>
<FindBugsFilter>
    <Match>
        <Class name="~.*\.*Immutable.*" />
    </Match>
    <Match>
        <Class name="~.*\.*ConfigImpl" />
    </Match>

    <!--
        Below are exclusions of issues found in our project,
        these need to be analysed and enabled on per-issue basis.
        For more details on the issues:
        https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html
    -->

    <!-- High priority report -->
    <!-- Class defines field that masks a superclass field -->
    <Match>
        <Bug pattern="MF_CLASS_MASKS_FIELD" />
    </Match>

    <!-- Write to static field from instance method -->
    <Match>
        <Bug pattern="ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD" />
    </Match>

    <!-- Superclass uses subclass during initialization -->
    <Match>
        <Bug pattern="IC_SUPERCLASS_USES_SUBCLASS_DURING_INITIALIZATION" />
    </Match>

    <!-- Field isn't final but should be -->
    <Match>
        <Bug pattern="MS_SHOULD_BE_FINAL" />
    </Match>

    <!-- Class defines equals() and uses Object.hashCode() -->
    <Match>
        <Bug pattern="HE_EQUALS_USE_HASHCODE" />
    </Match>

    <!-- Reliance on default encoding -->
    <Match>
        <Bug pattern="DM_DEFAULT_ENCODING" />
    </Match>

    <!-- Result of integer multiplication cast to long -->
    <Match>
        <Bug pattern="ICAST_INTEGER_MULTIPLY_CAST_TO_LONG" />
    </Match>

    <!-- Explicit garbage collection; extremely dubious except in benchmarking code -->
    <Match>
        <Bug pattern="DM_GC" />
    </Match>

    <!-- Dead store to local variable -->
    <Match>
        <Bug pattern="DLS_DEAD_LOCAL_STORE" />
    </Match>

    <!-- Random object created and used only once -->
    <Match>
        <Bug pattern="DMI_RANDOM_USED_ONLY_ONCE" />
    </Match>

    <!-- Possible null pointer dereference -->
    <Match>
        <Bug pattern="NP_NULL_ON_SOME_PATH"/>
    </Match>

    <!-- Possible null pointer dereference due to return value of called method -->
    <Match>
        <Bug pattern="NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE"/>
    </Match>

    <!-- Parameter must be non-null but is marked as nullable -->
    <Match>
        <Bug pattern="NP_PARAMETER_MUST_BE_NONNULL_BUT_MARKED_AS_NULLABLE"/>
    </Match>
    <!-- /High priority report -->

    <!-- Medium priority report -->
    <!-- Method uses the same code for two branches -->
    <Match>
        <Bug pattern="DB_DUPLICATE_BRANCHES"/>
    </Match>

    <!-- Class defines compareTo(...) and uses Object.equals() -->
    <Match>
        <Bug pattern="EQ_COMPARETO_USE_OBJECT_EQUALS"/>
    </Match>

    <!-- Unread public/protected field -->
    <Match>
        <Bug pattern="URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD"/>
    </Match>

    <!-- Inconsistent synchronization -->
    <Match>
        <Bug pattern="IS2_INCONSISTENT_SYNC"/>
    </Match>

    <!-- Boxed value is unboxed and then immediately reboxed -->
    <Match>
        <Bug pattern="BX_UNBOXING_IMMEDIATELY_REBOXED"/>
    </Match>

    <!-- Method does not release lock on all exception paths -->
    <Match>
        <Bug pattern="UL_UNRELEASED_LOCK_EXCEPTION_PATH"/>
    </Match>

    <!-- May expose internal representation by incorporating reference to mutable object -->
    <Match>
        <Bug pattern="EI_EXPOSE_REP2"/>
    </Match>

    <!-- Comparator doesn't implement Serializable -->
    <Match>
        <Bug pattern="SE_COMPARATOR_SHOULD_BE_SERIALIZABLE"/>
    </Match>

    <!-- Method names should start with a lower case letter -->
    <Match>
        <Bug pattern="NM_METHOD_NAMING_CONVENTION"/>
    </Match>

    <!-- Class doesn't override equals in superclass -->
    <Match>
        <Bug pattern="EQ_DOESNT_OVERRIDE_EQUALS"/>
    </Match>

    <!-- Rough value of known constant found -->
    <Match>
        <Bug pattern="CNT_ROUGH_CONSTANT_VALUE"/>
    </Match>

    <!-- Useless object created -->
    <Match>
        <Bug pattern="UC_USELESS_OBJECT"/>
    </Match>

    <!-- Field is a mutable collection which should be package protected -->
    <Match>
        <Bug pattern="MS_MUTABLE_COLLECTION_PKGPROTECT"/>
    </Match>

    <!-- May expose internal representation by returning reference to mutable object -->
    <Match>
        <Bug pattern="EI_EXPOSE_REP"/>
    </Match>

    <!-- Return value of method without side effect is ignored -->
    <Match>
        <Bug pattern="RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT"/>
    </Match>

    <!-- Unread field: should this field be static? -->
    <Match>
        <Bug pattern="SS_SHOULD_BE_STATIC"/>
    </Match>

    <!-- Unread field -->
    <Match>
        <Bug pattern="URF_UNREAD_FIELD"/>
    </Match>

    <!-- Invocation of equals() on an array, which is equivalent to == -->
    <Match>
        <Bug pattern="EC_BAD_ARRAY_COMPARE"/>
    </Match>

    <!-- Iterator next() method can't throw NoSuchElementException -->
    <Match>
        <Bug pattern="IT_NO_SUCH_ELEMENT"/>
    </Match>

    <!-- Possible null pointer dereference in method on exception path -->
    <Match>
        <Bug pattern="NP_NULL_ON_SOME_PATH_EXCEPTION"/>
    </Match>

    <!-- A volatile reference to an array doesn't treat the array elements as volatile -->
    <Match>
        <Bug pattern="VO_VOLATILE_REFERENCE_TO_ARRAY"/>
    </Match>

    <!-- Method invokes System.exit(...) -->
    <Match>
        <Bug pattern="DM_EXIT"/>
    </Match>

    <!-- Negating the result of compareTo()/compare() -->
    <Match>
        <Bug pattern="RV_NEGATING_RESULT_OF_COMPARETO"/>
    </Match>
    
    <!-- Uninitialized read of field in constructor -->
    <Match>
        <Bug pattern="UR_UNINIT_READ"/>
    </Match>
    
    <!-- Exception is caught when Exception is not thrown -->
    <Match>
        <Bug pattern="REC_CATCH_EXCEPTION"/>
    </Match>
    
    <!-- Useless non-empty void method -->
    <Match>
        <Bug pattern="UC_USELESS_VOID_METHOD"/>
    </Match>
    
    <!-- Should be a static inner class -->
    <Match>
        <Bug pattern="SIC_INNER_SHOULD_BE_STATIC"/>
    </Match>
    
    <!-- Field should be moved out of an interface and made package protected -->
    <Match>
        <Bug pattern="MS_OOI_PKGPROTECT"/>
    </Match>
    
    <!-- Method ignores exceptional return value -->
    <Match>
        <Bug pattern="RV_RETURN_VALUE_IGNORED_BAD_PRACTICE"/>
    </Match>
    
    <!-- Code contains a hard coded reference to an absolute pathname -->
    <Match>
        <Bug pattern="DMI_HARDCODED_ABSOLUTE_FILENAME"/>
    </Match>
    
    <!-- Method may fail to clean up stream or resource -->
    <Match>
        <Bug pattern="OBL_UNSATISFIED_OBLIGATION"/>
    </Match>
    
    <!-- Nullcheck of value previously dereferenced -->
    <Match>
        <Bug pattern="RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE"/>
    </Match>
    
    <!-- Inefficient use of keySet iterator instead of entrySet iterator -->
    <Match>
        <Bug pattern="WMI_WRONG_MAP_ITERATOR"/>
    </Match>
    
    <!-- Method may fail to close stream -->
    <Match>
        <Bug pattern="OS_OPEN_STREAM"/>
    </Match>
    
    <!-- Method allocates an object, only to get the class object -->
    <Match>
        <Bug pattern="DM_NEW_FOR_GETCLASS"/>
    </Match>
    <!-- /Medium priority report -->

    <!-- Low priority report -->
    <!-- Class defines hashCode() and uses Object.equals() -->
    <Match>
        <Bug pattern="HE_HASHCODE_USE_OBJECT_EQUALS"/>
    </Match>

    <!-- Method may fail to close stream on exception -->
    <Match>
        <Bug pattern="OS_OPEN_STREAM_EXCEPTION_PATH"/>
    </Match>

    <!-- Non-serializable class has a serializable inner class -->
    <Match>
        <Bug pattern="SE_BAD_FIELD_INNER_CLASS"/>
    </Match>

    <!-- Method calls static Math class method on a constant value -->
    <Match>
        <Bug pattern="UM_UNNECESSARY_MATH"/>
    </Match>

    <!-- Confusing method names -->
    <Match>
        <Bug pattern="NM_CONFUSING"/>
    </Match>

    <!-- Class is Serializable, but doesn't define serialVersionUID -->
    <Match>
        <Bug pattern="SE_NO_SERIALVERSIONID"/>
    </Match>

    <!-- Consider returning a zero length array rather than null -->
    <Match>
        <Bug pattern="PZLA_PREFER_ZERO_LENGTH_ARRAYS"/>
    </Match>

    <!-- Unchecked/unconfirmed cast of return value from method -->
    <Match>
        <Bug pattern="BC_UNCONFIRMED_CAST_OF_RETURN_VALUE"/>
    </Match>

    <!-- Redundant nullcheck of value known to be non-null -->
    <Match>
        <Bug pattern="RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE"/>
    </Match>

    <!-- Test for floating point equality -->
    <Match>
        <Bug pattern="FE_FLOATING_POINT_EQUALITY"/>
    </Match>

    <!-- Non-transient non-serializable instance field in serializable class -->
    <Match>
        <Bug pattern="SE_BAD_FIELD"/>
    </Match>

    <!-- Field not initialized in constructor but dereferenced without null check -->
    <Match>
        <Bug pattern="UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR"/>
    </Match>

    <!-- Method might ignore exception -->
    <Match>
        <Bug pattern="DE_MIGHT_IGNORE"/>
    </Match>

    <!-- Consider using Locale parameterized version of invoked method -->
    <Match>
        <Bug pattern="DM_CONVERT_CASE"/>
    </Match>

    <!-- Could be refactored into a named static inner class -->
    <Match>
        <Bug pattern="SIC_INNER_SHOULD_BE_STATIC_ANON"/>
    </Match>

    <!-- Class implements same interface as superclass -->
    <Match>
        <Bug pattern="RI_REDUNDANT_INTERFACES"/>
    </Match>

    <!-- Private method is never called -->
    <Match>
        <Bug pattern="UPM_UNCALLED_PRIVATE_METHOD"/>
    </Match>

    <!-- Method invoked that should be only be invoked inside a doPrivileged block -->
    <Match>
        <Bug pattern="DP_DO_INSIDE_DO_PRIVILEGED"/>
    </Match>
    <!-- /Low priority report -->

</FindBugsFilter>
